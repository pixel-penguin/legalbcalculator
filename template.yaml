AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Legal Calculator API with CloudFront CDN for both API and static content

Parameters:
  Environment:
    Type: String
    Default: sandbox
    AllowedValues:
      - sandbox
      - live
    Description: Environment for deployment
  
  DomainName:
    Type: String
    Default: ""
    Description: Custom domain name (optional, e.g., calculator.yourdomain.com)
  
  ApiDomainName:
    Type: String
    Default: ""
    Description: Custom API domain name (optional, e.g., api.yourdomain.com)

Conditions:
  HasCustomDomain: !Not [!Equals [!Ref DomainName, ""]]
  HasApiDomain: !Not [!Equals [!Ref ApiDomainName, ""]]

Globals:
  Function:
    Timeout: 30
    Runtime: nodejs18.x
    Environment:
      Variables:
        ENVIRONMENT: !Ref Environment

Resources:
  # API Gateway
  LegalCalculatorApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        ApiKeyRequired: false

  # Lambda Function
  TransferCostCalculatorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'transfer-cost-calculator-${Environment}'
      CodeUri: src/
      Handler: index.handler
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
      Events:
        Calculate:
          Type: Api
          Properties:
            RestApiId: !Ref LegalCalculatorApi
            Path: /calculate
            Method: post
        Options:
          Type: Api
          Properties:
            RestApiId: !Ref LegalCalculatorApi
            Path: /calculate
            Method: options

  # S3 Bucket for hosting widget and documentation
  LegalCalculatorBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'legal-calculator-${Environment}-${AWS::AccountId}'
      WebsiteConfiguration:
        IndexDocument: documentation.html
        ErrorDocument: documentation.html
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3600

  # S3 Bucket Policy for public read access
  LegalCalculatorBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LegalCalculatorBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${LegalCalculatorBucket}/*'

  # CloudFront Origin Access Control for S3
  CloudFrontOAC:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        Name: !Sub '${AWS::StackName}-OAC'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  # CloudFront Distribution for Static Content (Widget & Documentation)
  StaticContentDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [HasCustomDomain, [!Ref DomainName], !Ref "AWS::NoValue"]
        DefaultCacheBehavior:
          TargetOriginId: S3Origin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [GET, HEAD, OPTIONS]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # CORS-S3Origin
          ResponseHeadersPolicyId: 67f7725c-6f97-4210-82d7-5512b31e9d03  # SecurityHeaders
        Origins:
          - Id: S3Origin
            DomainName: !GetAtt LegalCalculatorBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOAC
        Enabled: true
        DefaultRootObject: documentation.html
        PriceClass: PriceClass_100
        HttpVersion: http2
        Comment: !Sub 'Legal Calculator Static Content - ${Environment}'
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /documentation.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /documentation.html

  # CloudFront Distribution for API
  ApiDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases: !If [HasApiDomain, [!Ref ApiDomainName], !Ref "AWS::NoValue"]
        DefaultCacheBehavior:
          TargetOriginId: ApiGatewayOrigin
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods: [DELETE, GET, HEAD, OPTIONS, PATCH, POST, PUT]
          CachedMethods: [GET, HEAD, OPTIONS]
          Compress: true
          # Cache policy for API - short TTL for dynamic content
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad  # CachingDisabled (for dynamic API)
          OriginRequestPolicyId: b689b0a8-53d0-40ab-baf2-68738e2966ac  # AllViewerExceptHostHeader
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd  # CORS-With-Preflight
        Origins:
          - Id: ApiGatewayOrigin
            DomainName: !Sub '${LegalCalculatorApi}.execute-api.${AWS::Region}.amazonaws.com'
            OriginPath: !Sub '/${Environment}'
            CustomOriginConfig:
              HTTPPort: 443
              OriginProtocolPolicy: https-only
              OriginSSLProtocols: [TLSv1.2]
        Enabled: true
        PriceClass: PriceClass_100
        HttpVersion: http2
        Comment: !Sub 'Legal Calculator API - ${Environment}'

  # Update S3 bucket policy to allow CloudFront OAC
  CloudFrontS3Policy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LegalCalculatorBucket
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: cloudfront.amazonaws.com
            Action: 's3:GetObject'
            Resource: !Sub '${LegalCalculatorBucket}/*'
            Condition:
              StringEquals:
                'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${StaticContentDistribution}'
          - Effect: Allow
            Principal: '*'
            Action: 's3:GetObject'
            Resource: !Sub '${LegalCalculatorBucket}/*'

  # Cache invalidation Lambda for deployments
  CacheInvalidationFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub 'cache-invalidation-${Environment}'
      CodeUri: cache-invalidation/
      Handler: index.handler
      Runtime: python3.9
      Timeout: 60
      Policies:
        - Statement:
            - Effect: Allow
              Action:
                - cloudfront:CreateInvalidation
              Resource: '*'
      Environment:
        Variables:
          DISTRIBUTION_ID: !Ref StaticContentDistribution

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL (direct)
    Value: !Sub 'https://${LegalCalculatorApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiUrl'

  ApiCloudFrontUrl:
    Description: API endpoint via CloudFront CDN
    Value: !Sub 'https://${ApiDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiCloudFrontUrl'

  ApiCustomDomainUrl:
    Condition: HasApiDomain
    Description: API endpoint via custom domain
    Value: !Sub 'https://${ApiDomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-ApiCustomDomainUrl'

  WebsiteUrl:
    Description: Website URL (S3 direct)
    Value: !GetAtt LegalCalculatorBucket.WebsiteURL
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteUrl'

  WebsiteCloudFrontUrl:
    Description: Website URL via CloudFront CDN
    Value: !Sub 'https://${StaticContentDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteCloudFrontUrl'

  WebsiteCustomDomainUrl:
    Condition: HasCustomDomain
    Description: Website URL via custom domain
    Value: !Sub 'https://${DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-WebsiteCustomDomainUrl'

  BucketName:
    Description: S3 Bucket name for hosting files
    Value: !Ref LegalCalculatorBucket
    Export:
      Name: !Sub '${AWS::StackName}-BucketName'

  StaticDistributionId:
    Description: CloudFront Distribution ID for static content
    Value: !Ref StaticContentDistribution
    Export:
      Name: !Sub '${AWS::StackName}-StaticDistributionId'

  ApiDistributionId:
    Description: CloudFront Distribution ID for API
    Value: !Ref ApiDistribution
    Export:
      Name: !Sub '${AWS::StackName}-ApiDistributionId' 